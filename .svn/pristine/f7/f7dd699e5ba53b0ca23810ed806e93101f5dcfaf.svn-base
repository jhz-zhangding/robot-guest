package com.efrobot.guests.action;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.LinearLayout;

import com.efrobot.guests.GuestsApplication;
import com.efrobot.guests.R;
import com.efrobot.guests.base.GuestsBasePresenter;
import com.efrobot.guests.bean.Action_Head;
import com.efrobot.guests.bean.Action_Wheel;
import com.efrobot.guests.bean.Action_Wing;
import com.efrobot.guests.bean.CustomActionBean;
import com.efrobot.guests.dao.ActionBaseDao;
import com.efrobot.guests.utils.CustomHintDialog;
import com.efrobot.guests.utils.FaceAndActionUtils;
import com.efrobot.library.mvp.utils.L;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by Administrator on 2017/3/2.
 */
public class ActionPresenter extends GuestsBasePresenter<IActionView> implements CustomHeadAdapter.onCallbackHead, CustomWingAdapter.onCallbackWing {

    /**
     * 表情数据适配器
     */
    private FaceAdapter faceAdapter;
    private HashMap<String, String> mFaceList;
    private HashMap<String, String> mActionList;
    private ActionBaseDao mActionDao;
    private List<CustomActionBean> customActionBeen;
    private String headJson = "", wingJson = "";

    //头部动作编辑按钮标示
    public boolean edit_btn_head = false;
    //轮子动作编辑按钮标示
    public boolean edit_btn_wheel = false;
    //翅膀动作编辑按钮标示
    public boolean edit_btn_wing = false;
    private List<Action_Head> list_Head;
    private List<Action_Wing> list_Wing;
    //头部动作的总时间
    private double headTime = 0;
    //轮子动作的总时间
    private double wheelTime = 0;
    //翅膀动作的总时间
    private double wingTime = 0;

    public String finishAction = "";
    /**
     * 当前选中的部位
     */
    public int radiocheck = 1;

    CustomHeadAdapter headAdapter;
    CustomWingAdapter wingAdapter;

    //0系统动作，1自定义
    private String finishSport = "-1";
    /**
     *
     */
    //头部的footerview中的添加按钮
    private Button headBtn;
    //翅膀的footerview中的添加按钮
    private Button wheelBtn;
    //轮子的footerview中的添加按钮
    private Button wingBtn;

    /**
     * 表情、动作帮助类
     */
    public FaceAndActionUtils util;

    private int type = 0;
    private int welType = 0; //1从欢迎设置 2从结束设置进来的


    public ActionPresenter(IActionView mView) {
        super(mView);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mActionDao = GuestsApplication.from(getContext()).getActionDao();
        this.welType = mView.getType();

        list_Head = new ArrayList<Action_Head>();
        list_Wing = new ArrayList<Action_Wing>();

        util = FaceAndActionUtils.getInstance(getContext());
        mFaceList = util.readFaceData();

        initEdit();
        if (welType == 1) {
            customActionBeen = mActionDao.queryAllAction();
        } else if (welType == 2) {
            customActionBeen = mActionDao.queryAllEndAction();
        }
        initData();

    }

    private void initEdit() {
        mView.getBtnEdit().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.e("zhang", "radiocheck=" + radiocheck);


                switch (radiocheck) {
                    case 1:
                        if (list_Head == null || list_Head.isEmpty()) {
                            showToast("无可编辑内容");
                            return;
                        }
                        edit_btn_head = !edit_btn_head;
                        headAdapter.setvis(edit_btn_head);
                        mView.getBtnEdit().setText(!edit_btn_head ? "编辑" : "取消编辑");
                        break;
                    case 2:
                        if (list_Wing == null || list_Wing.isEmpty()) {
                            showToast("无可编辑内容");
                            return;
                        }
                        edit_btn_wing = !edit_btn_wing;
                        wingAdapter.setvis(edit_btn_wing);
                        mView.getBtnEdit().setText(!edit_btn_wing ? "编辑" : "取消编辑");
                        break;
                }

            }
        });

        mView.getBtnClrar().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.e("zhang", "list_Head=" + list_Head.size());
                Log.e("zhang", "list_Wing=" + list_Wing.size());
                if (list_Head.size() == 0 && list_Wing.size() == 0) {
                    showToast("没有内容");
                    return;
                }
                showDialog("确定清空所有自定义动作？", "custom");
            }
        });
    }

    /**
     * 提示框
     */
    private void showDialog(String content, final String check) {
        final CustomHintDialog dialog = new CustomHintDialog(getContext(), -1);
        dialog.setMessage(content);
        dialog.setCancleButton(getContext().getString(R.string.cancel), new CustomHintDialog.IButtonOnClickLister() {
            @Override
            public void onClickLister() {
                dialog.dismiss();
            }
        });
        dialog.setSubmitButton(getContext().getString(R.string.confirm), new CustomHintDialog.IButtonOnClickLister() {
            @Override
            public void onClickLister() {
                if ("custom".equals(check)) {
                    headAdapter.clear();
                    wingAdapter.clear();
                    headTime = 0;
                    wheelTime = 0;
                    wingTime = 0;
                    finishSport = "-1";
                    dialog.dismiss();
                }
            }
        });
        dialog.show();
    }

    //开始界面设置
    private void initData() {
        L.i("===============>>>>>>>>>>", "初始化数据" + customActionBeen);
        if (customActionBeen != null && customActionBeen.size() > 0) {
            headJson = customActionBeen.get(0).getHead();
            wingJson = customActionBeen.get(0).getWing();
            if (!headJson.isEmpty()) {
                list_Head = json_Head(headJson);
            }
            if (!wingJson.isEmpty()) {
                list_Wing = json_Wing(wingJson);
            }
            //表情
            String faceString = customActionBeen.get(0).getFace();
            if (null != faceString && !faceString.isEmpty()) {
                titleFace.add(faceString);
            }
            //灯带
            int lightType = customActionBeen.get(0).getLight();
            String time = customActionBeen.get(0).getLightDuration();
            mView.setLightData(lightType, time);
        }

        showFaceAndAction(1);

        headInitAdapter();
        wingInitAdapter();

    }

    AddFaceAndActionAdapter mAdapter;
    /**
     * 表情集
     */
    private List<String> titleFace = new ArrayList<String>();

    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        if (type == 1) {
            try {
                String face = mAdapter.getItem(position).index;
                //增加表情
                if (titleFace.isEmpty()) {
                    titleFace.add(face);
                } else {
                    titleFace.clear();
                    titleFace.add(face);
                }
//                finishFaceTime = finishFaceTime + Double.parseDouble(faceTimeArray[Integer.parseInt(face) - 1]);
//                mView.setFaceTime(finishFaceTime);
            } catch (Exception e) {
                e.printStackTrace();
            }
            showFaceAndAction(1);

        }
//        else if (type == 2) {
//            try {
//                String action = mAdapter.getItem(position).index;
//                if (!action.equals(finishAction)) {
//                    boolean isCon = Arrays.asList(syActionContentLight).contains(action);
//                    mView.setLightEnnabled(isCon);
//                    if (isCon)
//                        showToast("此动作附带灯带效果，因此关闭上方灯带选择项");
//                    finishAction = mAdapter.getItem(position).index;
//                    finishSport = "0";
//                } else {
//                    mView.setLightEnnabled(false);
//                    finishAction = "";
//                    finishSport = "";
//                }
//                mView.setActionEnabled(finishSport);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//            showFaceAndAction(2);
//        }

    }

    /**
     * 显示动作或表情
     */
    public void showFaceAndAction(int type) {
        this.type = type;
        initAdapter();
        if (type == 1) {
            initFacesAdater();
            mAdapter.setDataResource(mFaceList, finishAction, titleFace, 1);
        } else if (type == 2) {
//            mView.setActionText(finishAction);
//            mAdapter.setDataResource(mActionList, finishAction, titleFace, 2);
        }

    }

    /**
     * 初始化Adapter
     */
    private void initAdapter() {
        if (mAdapter == null) {
            mAdapter = new AddFaceAndActionAdapter(getContext());
            mView.setAdapter(mAdapter);
        }
    }

    /**
     * 选中表情数据适配
     */
    private void initFacesAdater() {
        if (faceAdapter == null) {
            faceAdapter = new FaceAdapter(getContext(), titleFace, new FaceAdapter.OnFaceDeleteCallBack() {
                @Override
                public void deleteCallBack(int positon) {
                    if (titleFace.isEmpty() || positon >= titleFace.size())
                        return;
                    titleFace.remove(positon);
                    initFacesAdater();
                }
            });
            mView.setFaces(faceAdapter);
        } else {
            faceAdapter.setDataResource(titleFace);
        }
        mView.setCurrentFace(titleFace.size());
    }

    public void headInitAdapter() {
        if (headAdapter == null) {
            headAdapter = new CustomHeadAdapter(getContext(), list_Head);
            headAdapter.setmOnCallbackHead(this);
            LinearLayout head_footView = (LinearLayout) LayoutInflater.from(getContext()).inflate(R.layout.custom_head_footer, null);

            headBtn = (Button) head_footView.findViewById(R.id.head_add_btn);

            headBtn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (list_Head.size() >= 4) {
                        showToast("已达到添加上限");
                    } else {
                        Action_Head head = new Action_Head();
                        head.setPosition(list_Head.size() + 1);
                        head.setAngle("无");
                        head.setDirection("无");
                        head.setNext_action_time("无");
                        list_Head.add(head);
                        headAdapter.setData(list_Head);

                        finishSport = "1";
                    }

                }
            });


            mView.head_setAdapter(headAdapter, head_footView);

        }
    }

    public void wingInitAdapter() {
        if (wingAdapter == null) {
            wingAdapter = new CustomWingAdapter(getContext(), list_Wing);
            wingAdapter.setmCallbackWing(this);
            LinearLayout wing_footView = (LinearLayout) LayoutInflater.from(getContext()).inflate(R.layout.custom_wing_footer, null);
            wingBtn = (Button) wing_footView.findViewById(R.id.wing_add_btn);
            wingBtn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (list_Wing.size() >= 4) {
                        showToast("已达到添加上限");
                    } else {
                        Action_Wing wing = new Action_Wing();
                        wing.setAngle("无");
                        wing.setDirection("无");

                        wing.setNext_action_time("无");

                        wing.setPosition(list_Wing.size() + 1);
                        list_Wing.add(wing);
                        wingAdapter.setData(list_Wing);

                        finishSport = "1";
                    }
                }
            });

            mView.wing_setAdapter(wingAdapter, wing_footView);
        }
    }


    /**
     * 创建head的json
     */
    private boolean cerateHeadJson(List<Action_Head> list_Head) {
        if (list_Head.isEmpty())
            return true;
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject2 = new JSONObject();
        JSONObject jsonObject = null;
        JSONObject tmpObj = null;
        int count = list_Head.size();
        try {
            for (int i = 0; i < count; i++) {
                tmpObj = new JSONObject();
                jsonObject = new JSONObject();
                tmpObj.put("direction", "move");
                tmpObj.put("directionspinner", list_Head.get(i).getDirection());


                String value = list_Head.get(i).getDirection();

                if (!TextUtils.isEmpty(value) && !value.equals("无")) {

                    String angle = list_Head.get(i).getAngle();
                    if ("左转".equals(value)) {
                        if (!TextUtils.isEmpty(angle) && !angle.equals("无"))
                            tmpObj.put("angle", 120 - Integer.parseInt(angle));
                    } else if ("右转".equals(value)) {
                        if (!TextUtils.isEmpty(angle) && !angle.equals("无"))
                            tmpObj.put("angle", Integer.parseInt(angle) + 120);
                    } else if ("归位".equals(value)) {
                        tmpObj.put("angle", 120);
                    }
                }

                jsonObject.put("head", tmpObj);
                if (!list_Head.get(i).getNext_action_time().equals("无")) {
                    String time = list_Head.get(i).getNext_action_time();
                    int nextTime = Integer.parseInt(time) * 1000;
                    jsonObject.put("next_action_time", nextTime + "");
                } else {
                    headJson = "";
                    showToast("头部动作时间不能为空");
                    return false;
                }
                jsonArray.put(jsonObject);
            }
            if (jsonArray.length() > 0) {
                jsonObject2.put("actions", jsonArray);
                headJson = jsonObject2.toString();
            }
        } catch (JSONException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * 解析head的json
     */
    private List<Action_Head> json_Head(String finishHead) {
        List<Action_Head> list = new ArrayList<Action_Head>();
        try {
            JSONObject object = new JSONObject(finishHead);
            JSONArray array = object.getJSONArray("actions");
            for (int i = 0; i < array.length(); i++) {
                JSONObject object1 = (JSONObject) array.get(i);
                Action_Head head = new Action_Head();
                if (object1.has("next_action_time")) {
                    String time = object1.getString("next_action_time");
                    int nextTime = Integer.parseInt(time) / 1000;
                    head.setNext_action_time(nextTime + "");
                    headTime = headTime + object1.getDouble("next_action_time");
                } else {
                    head.setNext_action_time("无");
                }
                JSONObject object2 = object1.getJSONObject("head");

                String dirextion = object2.getString("directionspinner");
                head.setDirection(dirextion);

                if (object2.has("angle")) {

                    String angle = object2.getString("angle");
                    int rightAngle = 0;
                    if (!TextUtils.isEmpty(angle)) {
                        try {
                            int num = Integer.parseInt(angle);
                            rightAngle = num;
                            if ("左转".equals(dirextion)) {
                                rightAngle = 120 - num;
                                head.setAngle(rightAngle + "");
                            } else if ("右转".equals(dirextion)) {
                                rightAngle = num - 120;
                                head.setAngle(rightAngle + "");
                            } else if ("归位".equals(dirextion)) {
                                head.setAngle("无");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                } else {
                    head.setAngle("无");
                }
                head.setPosition(list.size() + 1);
                list.add(head);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return list;
    }


    /**
     * 创建wheel的json
     */
    private boolean cerateWheelJson(List<Action_Wheel> list_Wheel) {
        Log.e("zhang", "size==" + list_Wheel.size());
        if (list_Wheel.isEmpty())
            return true;
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject2 = new JSONObject();
        JSONObject jsonObject = null;
        JSONObject tmpObj = null;
        int count = list_Wheel.size();
        try {
            for (int i = 0; i < count; i++) {
                tmpObj = new JSONObject();
                jsonObject = new JSONObject();


                if (list_Wheel.get(i).getDirection().equals("无")) {
                    tmpObj.put("direction", "stop");
                } else if (list_Wheel.get(i).getDirection().equals("前进")) {
                    tmpObj.put("direction", "front");
                } else if (list_Wheel.get(i).getDirection().equals("后退")) {
                    tmpObj.put("direction", "back");
                } else if (list_Wheel.get(i).getDirection().equals("左转")) {
                    tmpObj.put("direction", "left");
                } else if (list_Wheel.get(i).getDirection().equals("右转")) {
                    tmpObj.put("direction", "right");
                }


                tmpObj.put("directionspinner", list_Wheel.get(i).getDirection());

                if (!list_Wheel.get(i).getAngle().equals("无")) {
                    tmpObj.put("angle", list_Wheel.get(i).getAngle());
                }
                if (!list_Wheel.get(i).getSpeed().equals("无")) {
                    tmpObj.put("speed", list_Wheel.get(i).getSpeed());
                }
                jsonObject.put("wheel", tmpObj);
                if (!list_Wheel.get(i).getNext_action_time().equals("无")) {
                    jsonObject.put("next_action_time", list_Wheel.get(i).getNext_action_time());
                } else {
//                    wheelJson = "";
                    showToast("轮子动作时间不能为空");
                    return false;
                }
                jsonArray.put(jsonObject);
            }
            if (jsonArray.length() > 0) {
                jsonObject2.put("actions", jsonArray);
//                wheelJson = jsonObject2.toString();
            }
        } catch (JSONException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * 解析wheel的json
     */
    private List<Action_Wheel> json_Wheel(String finishWheel) {
        List<Action_Wheel> list = new ArrayList<Action_Wheel>();
        try {
            JSONObject object = new JSONObject(finishWheel);
            JSONArray array = object.getJSONArray("actions");
            for (int i = 0; i < array.length(); i++) {
                JSONObject object1 = (JSONObject) array.get(i);
                Action_Wheel wheel = new Action_Wheel();
                if (object1.has("next_action_time")) {
                    wheel.setNext_action_time(object1.getString("next_action_time"));
                    wheelTime = wheelTime + object1.getDouble("next_action_time");
                } else {
                    wheel.setNext_action_time("无");
                }
                JSONObject object2 = object1.getJSONObject("wheel");
                if (object2.has("angle")) {
                    wheel.setAngle(object2.getString("angle"));
                } else {
                    wheel.setAngle("无");
                }

                if (object2.has("speed")) {
                    wheel.setSpeed(object2.getString("speed"));
                } else {
                    wheel.setSpeed("无");
                }
                wheel.setDirection(object2.getString("directionspinner"));
                wheel.setPosition(list.size() + 1);
                list.add(wheel);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return list;
    }


    /**
     * 创建wing的json
     */
    private boolean cerateWingJson(List<Action_Wing> list_Wing) {
        if (list_Wing.isEmpty())
            return true;

        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject2 = new JSONObject();
        JSONObject jsonObject = null;
        JSONObject tmpObj = null;
        int count = list_Wing.size();
        try {
            for (int i = 0; i < count; i++) {
                tmpObj = new JSONObject();
                jsonObject = new JSONObject();
                if (list_Wing.get(i).getAngle().equals("无")) {
                    tmpObj.put("direction", "move");
                    tmpObj.put("angle", 0);
                } else {
                    tmpObj.put("direction", "move");
                    tmpObj.put("angle", list_Wing.get(i).getAngle());
                }
                tmpObj.put("directionspinner", list_Wing.get(i).getDirection());

                if (list_Wing.get(i).getDirection().equals("左翅膀")) {
                    jsonObject.put("left_wing", tmpObj);
                } else if (list_Wing.get(i).getDirection().equals("右翅膀")) {
                    jsonObject.put("right_wing", tmpObj);
                } else if (list_Wing.get(i).getDirection().equals("双翅膀")) {
                    jsonObject.put("wing", tmpObj);
                } else {
                    jsonObject.put("wing", tmpObj);
                }

                if (!list_Wing.get(i).getNext_action_time().equals("无")) {
                    String time = list_Wing.get(i).getNext_action_time();
                    int nextTime = Integer.parseInt(time) * 1000;
                    jsonObject.put("next_action_time", nextTime + "");
                } else {
                    wingJson = "";
                    showToast("翅膀动作时间不能为空");
                    return false;
                }
                jsonArray.put(jsonObject);
                tmpObj = null;
            }
            if (jsonArray.length() > 0) {
                jsonObject2.put("actions", jsonArray);
                wingJson = jsonObject2.toString();
            }
        } catch (JSONException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * 解析wing的json
     */
    private List<Action_Wing> json_Wing(String finishWing) {
        if (TextUtils.isEmpty(finishWing)) {
            return null;
        }


        List<Action_Wing> list = new ArrayList<Action_Wing>();
        try {
            JSONObject object = new JSONObject(finishWing);
            JSONArray array = object.getJSONArray("actions");
            for (int i = 0; i < array.length(); i++) {
                JSONObject object1 = (JSONObject) array.get(i);
                Action_Wing wing = new Action_Wing();
                if (object1.has("next_action_time")) {
                    String time = object1.getString("next_action_time");
                    int nextTime = Integer.parseInt(time) / 1000;
                    wing.setNext_action_time(nextTime + "");
                    wingTime = wingTime + object1.getDouble("next_action_time");
                } else {
                    wing.setNext_action_time("无");
                }
                JSONObject object2 = null;
                if (object1.has("left_wing")) {
                    object2 = object1.getJSONObject("left_wing");
                } else if (object1.has("right_wing")) {
                    object2 = object1.getJSONObject("right_wing");
                } else if (object1.has("wing")) {
                    object2 = object1.getJSONObject("wing");
                }

                if (object2 != null) {
                    if (object2.has("angle")) {
                        wing.setAngle(object2.getString("angle"));
                    } else {
                        wing.setAngle("无");
                    }
                    wing.setDirection(object2.getString("directionspinner"));
                    wing.setPosition(list.size() + 1);
                    list.add(wing);
                }

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 获取表情数据
     *
     * @return
     */
    private String saveFace() {
        String value = "";
        if (titleFace != null && !titleFace.isEmpty()) {
            int size = titleFace.size();
            for (int i = 0; i < size; i++) {
                value = titleFace.get(i);
            }

        }
        return value;
    }

    public void saveData() {
        headJson = "";
        wingJson = "";
        ArrayList<CustomActionBean> listBean = new ArrayList<CustomActionBean>();
        CustomActionBean bean = new CustomActionBean();
        if (!cerateHeadJson(list_Head)) {
            return;
        }
        if (!cerateWingJson(list_Wing)) {
            return;
        }
        bean.setHead(headJson);
        bean.setWing(wingJson);
        bean.setFace(saveFace());

        int lightType = mView.getLightType();
        String lightTime = mView.getLightDuration();
        if(lightType == 2) {
            if(lightTime.equals("无")) {
                showToast("闪烁时间不能为空哦");
                return;
            }
        }
        bean.setLight(lightType);
        bean.setLightDuration(lightTime);

        listBean.add(bean);


        if (welType == 1) {
            // 清空之前的数据
            mActionDao.delete(CustomActionBean.TABLE_NAME);
            mActionDao.insertAction(listBean);
        } else if (welType == 2) {
            // 清空之前的数据
            mActionDao.delete(CustomActionBean.TABLE_END_NAME);
            mActionDao.insertEndAction(listBean);
        }
        Intent intent = new Intent();
        setResult(intent, 1);
        exit();
    }


    @Override
    public void callback(List<Action_Head> list) {
        if (list == null) {
            return;
        }

        this.list_Head = list;
    }

    @Override
    public void callBackWing(List<Action_Wing> list) {
        if (list == null) {
            return;
        }

        this.list_Wing = list;
    }

}
