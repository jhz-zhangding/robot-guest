package com.efrobot.guests.usher;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;

import com.efrobot.guests.R;
import com.efrobot.guests.base.GuestsBasePresenter;
import com.efrobot.guests.service.UltrasonicService;
import com.efrobot.guests.utils.CustomHintDialog;
import com.efrobot.guests.utils.StateUtils;
import com.efrobot.guests.utils.TtsUtils;
import com.efrobot.library.RobotManager;
import com.efrobot.library.mvp.utils.L;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * Created by Administrator on 2017/3/2.
 */
public class UsherPresenter extends GuestsBasePresenter<IUsherView> implements RobotManager.OnGetUltrasonicCallBack,RobotManager.OnGetInfraredCallBack {

    private static final String TAG = UltrasonicService.class.getSimpleName();
    private Intent mServiceIntent;

    private boolean isReceiveUltrasonic = false;

    public UsherPresenter(IUsherView mView) {
        super(mView);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        mServiceIntent = new Intent(getContext(), UltrasonicService.class);
//        getContext().getApplicationContext().startService(mServiceIntent);

        initUltrasonicData();
    }

    public void initUltrasonicData() {
        RobotManager.getInstance(getContext()).registerOnGetUltrasonicCallBack(this);
//        RobotManager.getInstance(getContext()).registerOnGetInfraredCallBack(this);
        mHandle.sendEmptyMessageDelayed(0, 5000);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        L.i(TAG, "onDestroy");
//        getContext().getApplicationContext().stopService(mServiceIntent);
        RobotManager.getInstance(getContext()).unRegisterOnGetUltrasonicCallBack();
//        RobotManager.getInstance(getContext()).unRegisterOnGetInfraredCallBack();
    }


    @Override
    public void onGetUltrasonic(byte[] data) {
        try {
            isReceiveUltrasonic = true;
            mHandle.removeMessages(0);
            if (isUltraData(data)) {
                L.i(TAG, "---------------data--" + Arrays.toString(data));
                byte[] bytes = new byte[24];
                System.arraycopy(data, 5, bytes, 0, 24);
                for (int i = 0; i < bytes.length; i++) {
                    if ((i - 3) % 4 == 0) {
                        int valueNG = (bytes[i] & 255) | ((bytes[i - 1] & 255) << 8); // 距离
                        int numberNg = (bytes[i - 2] & 255) | ((bytes[i - 3] & 255) << 8); // 返回的探头编号 0-12
                        L.i(TAG, "第" + (numberNg) + "号超声波-----valueNG-" + valueNG);
                        Message message = new Message();
                        message.arg1 = numberNg;
                        message.arg2 = valueNG;
                        message.what = 1;
                        mHandle.sendMessage(message);
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void sendOpenUltrasonicData() {
        L.i(TAG, "Send data to open ultrasonic");
        byte[] data = new byte[12];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x03;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x03;
//        data[4] = (byte) 0x1F;
//        data[5] = (byte) 0xFF;

//        data[4] = (byte) 0x0B;
//        data[5] = (byte) 0x83;
//
        byte mByte1 = (byte) 0x01; // 探头1---0
        byte mByte2 = (byte) 0x02; // 探头2---1
        byte mByte8 = (byte) 0x80;
        data[5] = ((byte) (mByte1 | mByte2 | mByte8));

        byte mByte9 = (byte) 0x01; // 探头9---3
        byte mByte10 = (byte) 0x02; // 探头10---4
        byte mByte11 = (byte) 0x04;
        data[4] = ((byte) (mByte9 | mByte10 | mByte11));

//        data[4] = (byte) 0x00;
//        data[5] = (byte) 0x01;

        data[6] = (byte) 0x00;
        data[7] = (byte) 7;
        //开启后8秒左右收到回调
        RobotManager.getInstance(getContext()).getCustomTaskInstance().sendByteData(data);
        if (!isReceiveUltrasonic) { //是否接受到超声波检测信息
            reSend();
        }
    }

    private void reSend() {
        mHandle.sendEmptyMessageDelayed(0, 5000);
    }

    Handler mHandle = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                        L.i(TAG, "Resend open UltrasonicData");
                        //发送探头信息
                        sendOpenUltrasonicData();
                    break;
                case 1:
                    int numberNg = msg.arg1;
                    int valueNG = msg.arg2;
                    mView.setCurrentTime("超声波   ：时间: " + getCurrentTime());
                    switch (numberNg) {
                        case 0:
                            mView.setDistance0("上中" + "：" + valueNG);
                            break;
                        case 1:
                            mView.setDistance1("上左" + "：" + valueNG);
                            break;
                        case 7:
                            mView.setDistance7("上右" + "：" + valueNG);
                            break;
                        case 8:
                            mView.setDistance8("下右" + "：" + valueNG);
                            break;
                        case 9:
                            mView.setDistance9("下中" + "：" + valueNG);
                            break;
                        case 10:
                            mView.setDistance10("下左" + "：" + valueNG);
                            break;
                    }
                    break;
                case 7:
                    //打开红外
                    sendInfrared();
                    break;
                case 8:
                    String infrared = (String) msg.obj;
                    mView.setInfrared(infrared);
                    break;
            }
        }
    };

    /**
     * 关闭超声波检测
     *
     * @param context 上下文
     */
    public void closeUltrasonic(Context context) {
        L.i(TAG, "Send data to close ultrasonic");
        byte[] data = new byte[12];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x03;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x03;
        data[4] = (byte) 0x00;
        data[5] = (byte) 0x00;
        data[6] = (byte) 0x00;
        data[7] = (byte) 0x00;

        RobotManager.getInstance(context).getCustomTaskInstance().sendByteData(data);

    }

    /**
     * 是否超声波检测
     *
     * @param data
     */
    private boolean isUltraData(byte[] data) {
        boolean bool = false;
        int cmdStart = (data[0] & 255) << 8 | data[1] & 255;
        int cmdOrder = (data[2] & 255) << 8 | data[3] & 255;
        if (cmdStart == 0xC03) {
            if (cmdOrder == 0x0502){
                //超声波反馈
                bool = true;
            }else if (cmdOrder == 0x0602){
                //超声波初始化
                    int result = (data[4] & 255);
                    L.i(TAG, "超声波=" + result);
                    if (result == 0) {
                        //成功
                        TtsUtils.sendTts(getContext(), "标定成功");
                        showToast("超声波标定成功 \t\tTime: " + getCurrentTime());
                        isReceiveUltrasonic = false;
                        sendOpenUltrasonicData();
                    } else {
//                    失败
                        TtsUtils.sendTts(getContext(), "标定失败");
                        showToast("超声波标定失败 \t\tTime: " + getCurrentTime());
                    }
                    //getHandler().sendEmptyMessageDelayed(ULTRASONIC_REMOVE_MSG, 5000);
                if(null != dialog) {
                    dialog.dismiss();
                }
            }
        }
        return bool;
    }

    public void sendTestUltrasonic(boolean isWriteFlash) {
        byte[] data = new byte[11];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x03;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x02;

        //data[4] = (byte) 0x1F;
        data[4] = (byte) 0x1F;

        //data[5] = (byte) 0xFF;
        data[5] = (byte) 0xFF;

        if (isWriteFlash)
            data[6] = (byte) 0x01;
        else
            data[6] = (byte) 0x00;
        RobotManager.getInstance(getContext()).getCustomTaskInstance().sendByteData(data);
    }

    public String getCurrentTime() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
        return (df.format(new Date()));     // new Date()为获取当前系统时间
    }

    /**
     * 提示框
     */
    CustomHintDialog dialog;
    public void showDialog(String content) {
        TtsUtils.sendTts(getContext(), content);
        dialog = new CustomHintDialog(getContext(), -1);
        dialog.setMessage(content);
        dialog.setCancelable(true);
        sendTestUltrasonic(false);
        dialog.show();
    }

    private boolean isGetInfrared = false;
    private void sendInfrared() {
        byte[] data = new byte[9];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x04;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x02;
//        if (isRetroactionInfrared) {
        data[4] = (byte) 0x01;
//            retroactionInfraredText.setText("反馈");
//        } else {
//            data[4] = (byte) 0x00;
//            retroactionInfraredText.setText("不反馈");
//        }
        L.i(TAG, "startInfrared=" + Arrays.toString(data));
        RobotManager.getInstance(getContext()).getCustomTaskInstance().sendByteData(data);
        if(!isGetInfrared) {
            mHandle.sendEmptyMessageDelayed(7, 5000);
        }
    }

    @Override
    public void onGetInfrared(byte[] data) {
        isGetInfrared = true;
        int order = (data[2] & 255) << 8 | data[3] & 255;
        // 0x0601  初始化
        if (order == 0x0601) {
            int result = (data[4] & 255);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            String tim = sdf.format(date);

            if (result == 0) {
                //成功
                showToast("成功 \t\tTime: " + tim);
            } else {
//                    失败
                showToast("失败 \t\tTime: " + tim);
            }
            //getHandler().sendEmptyMessageDelayed(INFRARED_REMOVE_MSG, 5000);

        } else if (order == 0x0401) { //0x0401  获取初始化数据
            int params1 = (data[4] & 255) << 8 | data[5] & 255;
            int params2 = (data[6] & 255) << 8 | data[7] & 255;
            int params3 = (data[8] & 255) << 8 | data[9] & 255;
            int params4 = (data[10] & 255) << 8 | data[11] & 255;
            int params5 = (data[12] & 255) << 8 | data[13] & 255;
            int params6 = (data[14] & 255) << 8 | data[15] & 255;
            int params7 = (data[16] & 255) << 8 | data[17] & 255;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            String tim = sdf.format(date);
            L.i(TAG, "Infrared//红外1 : " + params1 + " 红外2 : " + params2 + " 红外3 : " + params3 + " 红外4 : " + params4 + "\r\n红外5 : " + params5 + " 红外6 : " + params6 + " 红外7 : " + params7 + "\t\tTime: " + tim);
            //L.i(TAG, params1 + "=" + params2 + "=" + params3 + "=" + params4 + "=" + params5 + "=" + params6 + "=" + params7);
        } else if (order == 0x0501) { //0x0501  红外反馈
            int params1 = (data[4] & 255) << 8 | data[5] & 255;
            int params2 = (data[6] & 255) << 8 | data[7] & 255;
            int params3 = (data[8] & 255) << 8 | data[9] & 255;
            int params4 = (data[10] & 255) << 8 | data[11] & 255;
            int params5 = (data[12] & 255) << 8 | data[13] & 255;
            int params6 = (data[14] & 255) << 8 | data[15] & 255;
            int params7 = (data[16] & 255) << 8 | data[17] & 255;
            SimpleDateFormat sdf = new SimpleDateFormat("yy:MM:dd HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            String tim = sdf.format(date);
            Message msg = new Message();
            msg.what = 8;
            msg.obj = ("红外线：时间: " + tim + "\r\n红外1 : " + params1 + " 红外2 : " + params2 + " 红外3 : " + params3 + " 红外4 : " + params4 + "\r\n红外5 : " + params5 + " 红外6 : " + params6 + " 红外7 : " + params7);
            mHandle.sendMessage(msg);
            L.i(TAG, tim + "Infrared============" + params1 + "=" + params2 + "=" + params3 + "=" + params4 + "=" + params5 + "=" + params6 + "=" + params7);
        }
    }
}
