package com.efrobot.guests.setting;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;

import com.efrobot.guests.GuestsApplication;
import com.efrobot.guests.base.GuestsBasePresenter;
import com.efrobot.guests.bean.AddCustomMode;
import com.efrobot.guests.bean.CustomActionBean;
import com.efrobot.guests.bean.RemarkBean;
import com.efrobot.guests.bean.SettingBean;
import com.efrobot.guests.bean.UlPlaceBean;
import com.efrobot.guests.dao.ActionBaseDao;
import com.efrobot.guests.dao.RemarkDao;
import com.efrobot.guests.dao.SettingDao;
import com.efrobot.guests.dao.UltrasonicDao;
import com.efrobot.guests.utils.CustomHintDialog;
import com.efrobot.guests.utils.FaceAndActionUtils;
import com.efrobot.guests.utils.PreferencesUtils;
import com.efrobot.guests.utils.TtsUtils;
import com.efrobot.library.RobotManager;
import com.efrobot.library.mvp.utils.L;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * Created by Administrator on 2017/3/2.
 */
public class SettingPresenter extends GuestsBasePresenter<ISettingView> implements RobotManager.OnGetUltrasonicCallBack {

    private boolean isReceiveUltrasonic = false;

    private ActionBaseDao mActionDao;

    public SettingPresenter(ISettingView mView) {
        super(mView);
    }

    private RemarkDao mRemarkDao;
    private SettingDao mSettingDao;
    private UltrasonicDao ultrasonicDao;

    private SettingBean settingBean;
    private RemarkBean remarkBean;
    private UlPlaceBean ulPlaceBeen;

    private ArrayList<SettingBean> settingBeans = null;
    private ArrayList<RemarkBean> remarkBeans = null;
    private ArrayList<UlPlaceBean> ulPlaceBeans = null;

    private List<CustomActionBean> startActionBeen;
    private List<CustomActionBean> endActionBeen;

    public static String SP_END_TTS = "endTts";
    public static String SP_VOICE_TIME = "voiceTime";
    public static String SP_IS_AUTO_OPEN = "isAutoOpen";
    public static String SP_MODE = "mMode";
    public static String SP_START_TIME = "mStartTime";
    public static String SP_END_TIME = "mEndTime";
    public static String SP_GUEST_PLACE = "mGuestPlace";

    Handler mHandle = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                    L.i(TAG, "Resend open UltrasonicData");
                    //发送探头信息
                    sendOpenUltrasonicData();
                    break;
                case 1:
                    int numberNg = msg.arg1;
                    int valueNG = msg.arg2;
                    long valueNg2Cm = valueNG / 10;
                    switch (numberNg) {
                        case 0:
                            mView.setDistance0(valueNg2Cm + "");
                            break;
                        case 1:
                            mView.setDistance1(valueNg2Cm + "");
                            break;
                        case 7:
                            mView.setDistance7(valueNg2Cm + "");
                            break;
                        case 8:
                            mView.setDistance8(valueNg2Cm + "");
                            break;
                        case 9:
                            mView.setDistance9(valueNg2Cm + "");
                            break;
                        case 10:
                            mView.setDistance10(valueNg2Cm + "");
                            break;
                    }
                    break;
                case 2:
                    if (null != dialog) {
                        //是否没有正常退出弹出框
                        if (!isNormalExit) {
                            dialog.dismiss();
                        }
                    }
                    break;
            }
        }
    };

    public void initUltrasonicData() {
        RobotManager.getInstance(getContext()).registerOnGetUltrasonicCallBack(this);
//        RobotManager.getInstance(getContext()).registerOnGetInfraredCallBack(this);
        mHandle.sendEmptyMessageDelayed(0, 5000);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mRemarkDao = GuestsApplication.from(getContext()).getRemarkDao();
        mSettingDao = GuestsApplication.from(getContext()).getSettingDao();
        ultrasonicDao = GuestsApplication.from(getContext()).getUltrasonicDao();
        mActionDao = GuestsApplication.from(getContext()).getActionDao();

        //超声波测试数据
        initUltrasonicData();
        //定时任务 地点数据

        remarkBeans = mRemarkDao.queryAll();
        if (remarkBeans != null && remarkBeans.size() > 0) {
            mView.setTts(remarkBeans.get(0).getRemarkValue());
        }

        settingBeans = mSettingDao.queryAll();
        if (settingBeans != null && settingBeans.size() > 0) {
            mView.setDistance(settingBeans.get(0).getDistanceValue());
        }
//        if (settingBeans != null && settingBeans.size() > 0) {
//            mView.setIsOpenValue(0, 1);
//            mView.setOpenDistanceValue(0, settingBeans.get(0).getDistanceValue());
//        }

        ulPlaceBeans = ultrasonicDao.queryAll();
        if (ulPlaceBeans != null && ulPlaceBeans.size() > 0) {
            for (int i = 0; i < ulPlaceBeans.size(); i++) {
                if (ulPlaceBeans.get(i).getIsOpenValue() == 1) {
                    mView.setIsOpenValue(ulPlaceBeans.get(i).getUltrasonicId(), 1);
                    mView.setOpenDistanceValue(ulPlaceBeans.get(i).getUltrasonicId(), ulPlaceBeans.get(i).getDistanceValue());
                } else {
                    //置空
                    mView.setIsOpenValue(ulPlaceBeans.get(i).getUltrasonicId(), 0);
                    mView.setOpenDistanceValue(ulPlaceBeans.get(i).getUltrasonicId(), "");
                }
            }
        }
//        mView.setNum(PreferencesUtils.getInt(getContext().getApplicationContext(), "mNum", 1) + "");
//        mView.setFarNumValue(PreferencesUtils.getInt(getContext().getApplicationContext(), "mFarNum", 4) + "");
        // 结束语
        String endValue = PreferencesUtils.getString(getContext().getApplicationContext(), SP_END_TTS);
        if (endValue != null && !endValue.isEmpty()) {
            mView.setTtsEnd(endValue);
        }
        // 语音交流时间
        String voiceTime = PreferencesUtils.getString(getContext().getApplicationContext(), SP_VOICE_TIME);
        if (voiceTime != null && !voiceTime.isEmpty()) {
            mView.setVoiceTime(voiceTime);
        } else {
            mView.setVoiceTime("10");
        }

        // 是否自动校正后超声波
        boolean isAutoOpen = PreferencesUtils.getBoolean(getContext().getApplicationContext(), SP_IS_AUTO_OPEN);
        mView.setAutoOpen(isAutoOpen);

        String startTime = PreferencesUtils.getString(getContext().getApplicationContext(), SP_START_TIME);
        mView.setStartTime(startTime);

        String endTime = PreferencesUtils.getString(getContext().getApplicationContext(), SP_END_TIME);
        mView.setEndTime(endTime);

        String guestPlace = PreferencesUtils.getString(getContext().getApplicationContext(), SP_GUEST_PLACE);
        mView.setTimerPlace(guestPlace);

        // 定时任务设置

        updateData();

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        L.i(TAG, "onDestroy");
//        getContext().getApplicationContext().stopService(mServiceIntent);
        RobotManager.getInstance(getContext()).unRegisterOnGetUltrasonicCallBack();
//        RobotManager.getInstance(getContext()).unRegisterOnGetInfraredCallBack();
    }

    public void updateData() {
        //只处理最后一次数据
        startActionBeen = mActionDao.queryAllAction();
        endActionBeen = mActionDao.queryAllEndAction();
        if (null != startActionBeen && startActionBeen.size() > 0) {
            //表情
            String faceString = startActionBeen.get(0).getFace();
            if (faceString != null && !faceString.isEmpty()) {
                mView.setWelFace("表情：" + FaceAndActionUtils.getInstance(getContext()).contrastFace(faceString));
            } else {
                mView.setWelFace("表情：无");
            }

            //动作
            String headString = startActionBeen.get(0).getHead();
            String wingString = startActionBeen.get(0).getWing();
            if ((headString != null && !TextUtils.isEmpty(headString)) ||
                    (wingString != null && !TextUtils.isEmpty(wingString))) {
                mView.setWelAction("动作：自定义动作");
            } else {
                mView.setWelAction("动作：无");
            }

            //灯带
            int lightType = startActionBeen.get(0).getLight();
            String lightString = "灯带：关";
            if (lightType == 0) { // 0 - 关
                lightString = "灯带：关";
            } else if (lightType == 1) {
                lightString = "灯带：常亮";
            } else if (lightType == 2) {
                lightString = "灯带：闪烁";
            }
            mView.setWelLight(lightString);
        }

        if (null != endActionBeen && endActionBeen.size() > 0) {
            //结束表情
            String faceString = endActionBeen.get(0).getFace();
            if (faceString != null && !faceString.isEmpty()) {
                mView.setEndWelFace("表情：" + FaceAndActionUtils.getInstance(getContext()).contrastFace(faceString));
            } else {
                mView.setEndWelFace("表情：无");
            }

            //动作
            String headEndString = endActionBeen.get(0).getHead();
            String wingEndString = endActionBeen.get(0).getWing();
            if ((headEndString != null && !TextUtils.isEmpty(headEndString)) ||
                    (wingEndString != null && !TextUtils.isEmpty(wingEndString))) {
                mView.setEndWelAction("动作：自定义动作");
            } else {
                mView.setEndWelAction("动作：无");
            }

            //灯带
            int lightType = endActionBeen.get(0).getLight();
            String lightString = "灯带：关";
            if (lightType == 0) { // 0 - 关
                lightString = "灯带：关";
            } else if (lightType == 1) {
                lightString = "灯带：常亮";
            } else if (lightType == 2) {
                lightString = "灯带：闪烁";
            }
            mView.setEndWelLight(lightString);
        }

    }

    public void cancle() {
        exit();
    }

    public void affrim() {

        //自动检测
        boolean isAutoOpenInit = mView.getIsAutoOpen().isChecked();
        PreferencesUtils.putBoolean(getContext().getApplicationContext(), SP_IS_AUTO_OPEN, isAutoOpenInit);

        //交流模式
        int mode = mView.getExchangeMode();
        PreferencesUtils.putInt(getContext().getApplicationContext(), SP_MODE, mode);

        String startTime = mView.getStartTime();
        String endTime = mView.getEndTime();
        String guestPlace = mView.getTimerPlace();
        PreferencesUtils.putString(getContext().getApplicationContext(), SP_START_TIME, startTime);
        PreferencesUtils.putString(getContext().getApplicationContext(), SP_END_TIME, endTime);
        PreferencesUtils.putString(getContext().getApplicationContext(), SP_GUEST_PLACE, guestPlace);

        ArrayList<AddCustomMode> modes = GuestsApplication.from(getContext()).getModeDao().queryAll();

        if (mode == SettingActivity.selectedCustomMode) {
            if (modes != null && modes.size() > 0) {
                if (modes.get(0).getMusic().isEmpty() && modes.get(0).getImage().isEmpty() &&
                        modes.get(0).getMedia().isEmpty()) {
                    showToast("自定义模式设置为空");
                    return;
                }
            } else {
                showToast("自定义模式设置为空");
                return;
            }
        } else {

            String tts = mView.getTtsValue();
            if (!TextUtils.isEmpty(tts)) {
                if (remarkBeans != null && remarkBeans.size() > 0) {
                    //修改
                    mRemarkDao.update(remarkBeans.get(0).getId(), tts);
                } else {
                    //新增
                    remarkBean = new RemarkBean();
                    remarkBean.setRemarkValue(tts);
                    mRemarkDao.insert(remarkBean);
                }
            } else {
                showToast("TTS内容不能为空哦");
                return;
            }
//            int num = Integer.parseInt(mView.getNumValue());
//            PreferencesUtils.putInt(getContext().getApplicationContext(), "mNum", num);
//
//            int farNum = Integer.parseInt(mView.getFarNumValue());
//            PreferencesUtils.putInt(getContext().getApplicationContext(), "mFarNum", farNum);

            String endTts = mView.getTtsEndValue();
            PreferencesUtils.putString(getContext().getApplicationContext(), SP_END_TTS, endTts);

            String voiceTime = mView.getVoiceTime();
            PreferencesUtils.putString(getContext().getApplicationContext(), SP_VOICE_TIME, voiceTime);

            boolean isDistanceEmpty = true;
            //设置超声波
            for (int i = 0; i < SettingActivity.MyUlNum; i++) {
                int isCheck = mView.getIsOpenValue(i);
                if (!mView.getOpenDistanceValue(i).isEmpty()) {
                    isDistanceEmpty = false;
                }
                if (isCheck == 1 && mView.getOpenDistanceValue(i).isEmpty()) {
                    showToast("选中的超声波距离不能为空哦");
                    return;
                }
                String ulDistance = mView.getOpenDistanceValue(i);
                boolean isExit = ultrasonicDao.isExits(i);
                if (isExit) {
                    ultrasonicDao.update(isCheck, i, ulDistance);
                } else {
                    ulPlaceBeen = new UlPlaceBean();
                    ulPlaceBeen.setUltrasonicId(i);
                    ulPlaceBeen.setIsOpenValue(isCheck);
                    ulPlaceBeen.setDistanceValue(ulDistance);
                    ultrasonicDao.insert(ulPlaceBeen);
                }

            }
            if (isDistanceEmpty) {
                showToast("超声波距离不能为空哦");
                return;
            }
            showToast("保存成功");
//            exit();
        }
    }

    private void reSend() {
        mHandle.sendEmptyMessageDelayed(0, 5000);
    }

    private void sendOpenUltrasonicData() {
        L.i(TAG, "Send data to open ultrasonic");
        byte[] data = new byte[12];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x03;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x03;
//        data[4] = (byte) 0x1F;
//        data[5] = (byte) 0xFF;

//        data[4] = (byte) 0x0B;
//        data[5] = (byte) 0x83;
//
        byte mByte1 = (byte) 0x01; // 探头1---0
        byte mByte2 = (byte) 0x02; // 探头2---1
        byte mByte8 = (byte) 0x80;
        data[5] = ((byte) (mByte1 | mByte2 | mByte8));

        byte mByte9 = (byte) 0x01; // 探头9---3
        byte mByte10 = (byte) 0x02; // 探头10---4
        byte mByte11 = (byte) 0x04;
        data[4] = ((byte) (mByte9 | mByte10 | mByte11));

//        data[4] = (byte) 0x00;
//        data[5] = (byte) 0x01;

        data[6] = (byte) 0x00;
        data[7] = (byte) 7;
        //开启后8秒左右收到回调
        RobotManager.getInstance(getContext()).getCustomTaskInstance().sendByteData(data);
        if (!isReceiveUltrasonic) { //是否接受到超声波检测信息
            reSend();
        }
    }

    /**
     *
     * */
    @Override
    public void onGetUltrasonic(byte[] data) {
        try {
            isReceiveUltrasonic = true;
            mHandle.removeMessages(0);
            if (isUltraData(data)) {
                L.i(TAG, "---------------data--" + Arrays.toString(data));
                byte[] bytes = new byte[24];
                System.arraycopy(data, 5, bytes, 0, 24);
                for (int i = 0; i < bytes.length; i++) {
                    if ((i - 3) % 4 == 0) {
                        int valueNG = (bytes[i] & 255) | ((bytes[i - 1] & 255) << 8); // 距离
                        int numberNg = (bytes[i - 2] & 255) | ((bytes[i - 3] & 255) << 8); // 返回的探头编号 0-12
                        L.i(TAG, "第" + (numberNg) + "号超声波-----valueNG-" + valueNG);
                        Message message = new Message();
                        message.arg1 = numberNg;
                        message.arg2 = valueNG;
                        message.what = 1;
                        mHandle.sendMessage(message);
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 提示框
     */
    CustomHintDialog dialog;

    private boolean isNormalExit = false;

    public void showDialog(String content) {
        TtsUtils.sendTts(getContext(), content);
        dialog = new CustomHintDialog(getContext(), -1);
        dialog.setMessage(content);
        dialog.setCancelable(true);
        sendTestUltrasonic(false);
        dialog.show();
        //5秒后关闭对话框
        mHandle.sendEmptyMessageDelayed(2, 5000);
    }

    /**
     * 是否超声波检测
     *
     * @param data
     */
    private boolean isUltraData(byte[] data) {
        boolean bool = false;
        int cmdStart = (data[0] & 255) << 8 | data[1] & 255;
        int cmdOrder = (data[2] & 255) << 8 | data[3] & 255;
        if (cmdStart == 0xC03) {
            if (cmdOrder == 0x0502) {
                //超声波反馈
                bool = true;
            } else if (cmdOrder == 0x0602) {
                //超声波初始化
                int result = (data[4] & 255);
                L.i(TAG, "超声波=" + result);
                if (result == 0) {
                    //成功
                    TtsUtils.sendTts(getContext(), "标定成功");
                    showToast("超声波标定成功 \t\tTime: " + getCurrentTime());
                    isReceiveUltrasonic = false;
                    sendOpenUltrasonicData();
                } else {
//                    失败
                    TtsUtils.sendTts(getContext(), "标定失败");
                    showToast("超声波标定失败 \t\tTime: " + getCurrentTime());
                }
                //getHandler().sendEmptyMessageDelayed(ULTRASONIC_REMOVE_MSG, 5000);
                if (null != dialog) {
                    dialog.dismiss();
                }
                isNormalExit = true;
            }
        }
        return bool;
    }

    //超声波初始化
    public void sendTestUltrasonic(boolean isWriteFlash) {
        byte[] data = new byte[11];
        data[0] = (byte) 0x0c;
        data[1] = (byte) 0x03;
        data[2] = (byte) 0x06;
        data[3] = (byte) 0x02;

        //data[4] = (byte) 0x1F;
        data[4] = (byte) 0x1F;

        //data[5] = (byte) 0xFF;
        data[5] = (byte) 0xFF;

        if (isWriteFlash)
            data[6] = (byte) 0x01;
        else
            data[6] = (byte) 0x00;
        RobotManager.getInstance(getContext()).getCustomTaskInstance().sendByteData(data);
    }

    public String getCurrentTime() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
        return (df.format(new Date()));     // new Date()为获取当前系统时间
    }

}
