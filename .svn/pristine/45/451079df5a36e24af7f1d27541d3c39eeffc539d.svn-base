package com.efrobot.guests.action;

import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.efrobot.guests.R;
import com.efrobot.guests.base.GuestsBaseActivity;
import com.efrobot.guests.utils.PreferencesUtils;
import com.efrobot.library.mvp.presenter.BasePresenter;
import com.efrobot.library.mvp.utils.L;

public class ActionActivity extends GuestsBaseActivity<ActionPresenter> implements IActionView, View.OnClickListener, AdapterView.OnItemClickListener {

    private TextView actionBtn, lightBtn, faceBtn;
    private View actionLayout, lightLayout, faceActionView;
    private RelativeLayout lightRl;
    //自定义动作
    private RadioGroup part_radiogroup, light_radiogroup;
    //自定义动作头部选择
    private RadioButton headRadio, wingRadio;
    //灯带
    private RadioButton closeLight, openLight, flickerLight;
    private Spinner lightSpin;
    //自定义动作layout
    private RelativeLayout headLayout, wingLayout;
    /**
     * 创建动作脚本按钮
     */
    private TextView mCreateScript, mSaveBtn, mBackBtn;

    private double actionTime = 0;

    /**
     * 显示表情和动作的GridView
     */
    private GridView mGridView;

    /**
     * 自定义动作的编辑
     */
    private Button custom_btn_adit;
    /**
     * 清除自定义动作
     */
    private Button custom_btn_clear;
    private ListView head_ListView, wing_ListView, content_head_list;

    /**
     * 表情
     */
    private RecyclerView tvFaces;
    private LinearLayoutManager linearLayoutManager;

    private int welType;

    private int lightType = 0;
    private String lightDuration = "";

    @Override
    public BasePresenter createPresenter() {
        return new ActionPresenter(this);
    }

    @Override
    protected int getContentViewResource() {
        return R.layout.activity_action;
    }

    @Override
    public Context getContext() {
        return this;
    }

    @Override
    protected void onViewInit() {
        super.onViewInit();

        Intent intent = getIntent();
        this.welType = intent.getIntExtra("type", 0);

        actionLayout = findViewById(R.id.addCustom);
        lightLayout = findViewById(R.id.addLight);
        faceActionView = findViewById(R.id.face_action);
        //表情
        mGridView = (GridView) findViewById(R.id.add_grid_view);
        faceBtn = (TextView) findViewById(R.id.add_create_face);
        tvFaces = (RecyclerView) findViewById(R.id.tvFaces);
        linearLayoutManager = new LinearLayoutManager(this);
        linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
        tvFaces.setLayoutManager(linearLayoutManager);

        //灯带
        actionBtn = (TextView) findViewById(R.id.add_create_script);
        lightBtn = (TextView) findViewById(R.id.add_create_light);
        lightRl = (RelativeLayout) findViewById(R.id.light_layout);
        light_radiogroup = (RadioGroup) findViewById(R.id.add_light_group);
        closeLight = (RadioButton) findViewById(R.id.add_light_close);
        openLight = (RadioButton) findViewById(R.id.add_light_open);
        flickerLight = (RadioButton) findViewById(R.id.add_light_flicker);
        lightSpin = (Spinner) findViewById(R.id.open_light_spin);


        //自定义动作
        part_radiogroup = (RadioGroup) findViewById(R.id.part_radiogroup);
        mCreateScript = (TextView) findViewById(R.id.add_create_script);
        //自定义动作头部选择
        headRadio = (RadioButton) findViewById(R.id.head_radio);
        wingRadio = (RadioButton) findViewById(R.id.wing_radio);
        //自定义动作左侧下方layout
        headLayout = (RelativeLayout) findViewById(R.id.head_layout);
        wingLayout = (RelativeLayout) findViewById(R.id.wing_layout);
        //自定义动作编辑按钮
        custom_btn_adit = (Button) findViewById(R.id.custom_btn_adit);
        custom_btn_clear = (Button) findViewById(R.id.clear);
        //左侧选择数据的listview
        head_ListView = (ListView) findViewById(R.id.head_listview);
        wing_ListView = (ListView) findViewById(R.id.wing_listview);

        content_head_list = (ListView) findViewById(R.id.content_head);
        mSaveBtn = (TextView) findViewById(R.id.add_save_btn);
        mBackBtn = (TextView) findViewById(R.id.add_back);


        headRadio.setChecked(true);
        //自定义title点击
        part_radiogroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (headRadio.getId() == checkedId) {
                    headLayout.setVisibility(View.VISIBLE);
                    wingLayout.setVisibility(View.GONE);
                    ((ActionPresenter) mPresenter).radiocheck = 1;
                    custom_btn_adit.setText(!((ActionPresenter) mPresenter).edit_btn_head ? "编辑" : "取消编辑");

                } else if (wingRadio.getId() == checkedId) {
                    wingLayout.setVisibility(View.VISIBLE);
                    headLayout.setVisibility(View.GONE);
                    ((ActionPresenter) mPresenter).radiocheck = 3;
                    custom_btn_adit.setText(!((ActionPresenter) mPresenter).edit_btn_wing ? "编辑" : "取消编辑");
                }
            }
        });

        light_radiogroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup radioGroup, int i) {
                if (closeLight.getId() == i) {
                    lightSpin.setSelection(0);
                    lightSpin.setEnabled(false);
                    lightType = 0; //关
                } else if (openLight.getId() == i) {
                    lightSpin.setSelection(0);
                    lightSpin.setEnabled(false);
                    lightType = 1; //常
                } else if (flickerLight.getId() == i) {
                    lightSpin.setSelection(1);
                    lightSpin.setEnabled(true);
                    lightType = 2;  //2--闪
                    lightSpin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                        @Override
                        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                            String[] arrayTime = getResources().getStringArray(R.array.light);
                            lightDuration = arrayTime[i];
                        }

                        @Override
                        public void onNothingSelected(AdapterView<?> adapterView) {

                        }
                    });
                }
//                ((ActionPresenter)mPresenter).settingLight(lightType, lightDuration);
            }
        });

//        faceActionView.setVisibility(View.GONE);
        actionLayout.setVisibility(View.GONE);
        lightLayout.setVisibility(View.GONE);
    }

    @Override
    protected void setOnListener() {
        super.setOnListener();
        mSaveBtn.setOnClickListener(this);
        mBackBtn.setOnClickListener(this);
        actionBtn.setOnClickListener(this);
        lightBtn.setOnClickListener(this);
        faceBtn.setOnClickListener(this);
        mGridView.setOnItemClickListener(this);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.add_create_script:
                update(view);
                break;
            case R.id.add_create_light:
                update(view);
                break;
            case R.id.add_create_face:
                // 添加表情
                ((ActionPresenter) mPresenter).showFaceAndAction(1);
                update(view);
                break;
            case R.id.add_save_btn:
                ((ActionPresenter) mPresenter).saveData();
                break;
            case R.id.add_back:
                finish();
                break;
        }
    }

    private void update(View view) {
        actionLayout.setVisibility(View.GONE);
        lightLayout.setVisibility(View.GONE);
        faceActionView.setVisibility(View.GONE);
        if (actionBtn.equals(view)) {
            actionLayout.setVisibility(View.VISIBLE);
        } else if (lightBtn.equals(view)) {
            lightLayout.setVisibility(View.VISIBLE);
        } else if (faceBtn.equals(view)) {
            faceActionView.setVisibility(View.VISIBLE);
        }
    }

    @Override
    public void setAdapter(BaseAdapter mAdapter) {
        mGridView.setAdapter(mAdapter);
    }

    @Override
    public void head_setAdapter(CustomHeadAdapter mAdapter, LinearLayout head_footView) {
        if (head_footView != null)
            head_ListView.addFooterView(head_footView);
        if (mAdapter != null)
            head_ListView.setAdapter(mAdapter);
    }

    @Override
    public void wing_setAdapter(CustomWingAdapter mAdapter, LinearLayout wing_footView) {
        if (wing_footView != null)
            wing_ListView.addFooterView(wing_footView);
        wing_ListView.setAdapter(mAdapter);
    }

    @Override
    public Button getBtnEdit() {
        return custom_btn_adit;
    }

    @Override
    public Button getBtnClrar() {
        return custom_btn_clear;
    }

    @Override
    public void setActionTime(String time) {
        if (!TextUtils.isEmpty(time)) {
            actionTime = Double.parseDouble(time);
            mCreateScript.setText("创建动作(" + time + "'')");
        } else {
            mCreateScript.setText("创建动作");
            actionTime = 0;
        }
    }

    @Override
    public void setFaces(FaceAdapter adapter) {
        if (adapter != null) {
            tvFaces.setAdapter(adapter);
        }
    }

    @Override
    public void setCurrentFace(int position) {
        if (position == -1)
            return;
        L.e("====>>>", "position=" + position);
        tvFaces.smoothScrollToPosition(position);
    }

    @Override
    public void setLightData(int type, String time) {
        this.lightType = type;
        this.lightDuration = time;
        if (type == 0) { // 0 - 关
            closeLight.setChecked(true);
        } else if (type == 1) { // 常亮
            openLight.setChecked(true);
        } else if (type == 2) { // 闪烁
            flickerLight.setChecked(true);
            String[] lightArray = getResources().getStringArray(R.array.light);
            for (int i = 0; i < lightArray.length; i++) {
                if (time.equals(lightArray[i])) {
                    lightSpin.setSelection(i);
                    break;
                }
            }

        }

    }

    @Override
    public int getType() {
        return this.welType;
    }

    @Override
    public int getLightType() {
        return lightType;
    }

    @Override
    public String getLightDuration() {
        return lightDuration;
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        ((ActionPresenter) mPresenter).onItemClick(parent, view, position, id);
    }
}
